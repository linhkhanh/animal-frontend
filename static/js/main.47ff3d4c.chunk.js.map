{"version":3,"sources":["components/Header.js","components/Form.js","components/Row.js","components/Table.js","utils/api.js","services/animalService.js","App.js","serviceWorker.js","index.js"],"names":["Header","React","Component","Form","onSubmit","this","props","handleSubmit","className","htmlFor","type","id","placeholder","value","name","onChange","handleChange","species","breed","sex","age","image","class","checked","adopted","toggleCheck","Row","Fragment","animal","isEditing","scope","index","onClick","save","_id","key","src","alt","toggleEdit","a-key","delete","Table","map","item","executeApiCall","method","url","body","a","payload","JSON","stringify","fetch","headers","response","json","buildUrl","apiPath","process","console","log","apiUtil","data","newOne","isCompleted","App","setState","state","event","target","preventDefault","parseInt","animalService","newData","findIndex","updatedData","deleteData","getAttribute","slice","fetchAnimal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47ff3d4c.chunk.js","sourcesContent":["import React from 'react';\nclass Header extends React.Component {\n    render () {\n        return (\n            <div>\n                <h1>Animal Shelter</h1>\n            </div>\n        )\n    }\n}\n\nexport default Header","import React from 'react';\nimport { string, number, func, bool } from 'prop-types';\n\nclass Form extends React.Component {\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input type=\"text\" className=\"form-control\" id=\"name\" placeholder=\"enter name of animal\" value={this.props.name} onChange={this.props.handleChange} />\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"species\">Species</label>\n                    <input type=\"text\" className=\"form-control\" id=\"species\" placeholder=\"enter species\" value={this.props.species} onChange={this.props.handleChange} />\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"breed\">Breed</label>\n                    <input type=\"text\" className=\"form-control\" id=\"breed\" placeholder=\"enter breed\" value={this.props.breed} onChange={this.props.handleChange} />\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"sex\">Sex</label>\n                    <input type=\"text\" className=\"form-control\" id=\"sex\" placeholder=\"enter sex\" value={this.props.sex} onChange={this.props.handleChange} />\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"age\">Age</label>\n                    <input type=\"number\" className=\"form-control\" id=\"age\" placeholder=\"enter age\" value={this.props.age} onChange={this.props.handleChange} />\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"image\">Image</label>\n                    <input type=\"text\" className=\"form-control\" id=\"image\" placeholder=\"enter image url\" value={this.props.image} onChange={this.props.handleChange} />\n                </div>\n\n                <div class=\"form-group form-check\">\n                    <input type=\"checkbox\" className=\"form-check-input\" checked={this.props.adopted} onChange={this.props.toggleCheck} />\n                    <label className=\"form-check-label\" htmlFor=\"adopted\">Adopted</label>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">Add</button>\n            </form>\n        )\n    }\n}\n\nForm.propTypes = {\n    handleSubmit: func,\n    handleChange: func,\n    toggleCheck: func,\n    name: string,\n    species: string,\n    breed: string,\n    age: number,\n    sex: string,\n    image: string,\n    adopted: bool\n};\n\nexport default Form","import React, { Component } from 'react';\nimport { number, object, func } from 'prop-types';\n\nclass Row extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                {!this.props.animal.isEditing ?\n                    < tr >\n                        <th scope=\"row\">{this.props.index}</th>\n                        <td>{this.props.animal.name}</td>\n                        <td>{this.props.animal.species}</td>\n                        <td>{this.props.animal.breed}</td>\n                        <td><img src={this.props.animal.image} alt=\"this is an animal\" /></td>\n                        <td>{this.props.animal.age}</td>\n                        <td>{this.props.animal.sex}</td>\n                        <td>{this.props.animal.adopted ? \"True\" : \"False\"}</td>\n                        <td><button id={this.props.index} onClick={this.props.toggleEdit}>Edit</button> <button a-key={this.props.animal._id} onClick={this.props.delete}>Delete</button></td>\n                    </tr> :\n                    <tr>\n                        <th scope=\"row\">{this.props.index}</th>\n                        <td><input value={this.props.name} onChange={this.props.handleChange} id='name'/></td>\n                        <td><input value={this.props.species} onChange={this.props.handleChange} id='species'/></td>\n                        <td><input value={this.props.breed} onChange={this.props.handleChange} id='breed'/></td>\n                        <td><input value={this.props.image} onChange={this.props.handleChange} id='image'/></td>\n                        <td><input value={this.props.age} onChange={this.props.handleChange} id='age'/></td>\n                        <td><input value={this.props.sex} onChange={this.props.handleChange} id='sex'/></td>\n                        <td><input type=\"checkbox\" className=\"form-check-input\" checked={this.props.adopted} onChange={this.props.toggleCheck} id='adopted'/>\n                            <label className=\"form-check-label\" htmlFor=\"adopted\">Adopted</label></td>\n                        <td><button onClick={this.props.save} id={this.props.animal._id} key={this.props.index}>Save </button>Delete</td>\n                    </tr>\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nRow.propTypes = {\n    index: number,\n    animal: object,\n    toggleCheck: func,\n    toggleEdit: func\n}\nexport default Row","import React, { Component } from 'react';\nimport Row from './Row';\nimport { array, func } from 'prop-types';\nclass Table extends Component {\n    render() {\n        return (\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Species</th>\n                        <th scope=\"col\">Breed</th>\n                        <th scope=\"col\">Image</th>\n                        <th scope=\"col\">Age</th>\n                        <th scope=\"col\">Sex</th>\n                        <th scope=\"col\">Adopted</th>\n                        <th scope=\"col\">Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.animal.map((item, index) => {\n                        return (\n                            <Row index={index} animal={item}\n                                toggleEdit={this.props.toggleEdit}\n                                name={this.props.name}\n                                species={this.props.species} breed={this.props.breed}\n                                sex={this.props.sex} age={this.props.age} image={this.props.image}\n                                adopted={this.props.adopted}\n                                handleChange={this.props.handleChange}\n                                toggleCheck={this.props.toggleCheck}\n                                save={this.props.save}\n                                delete={this.props.delete}\n                            />\n                        )\n                    })}\n                </tbody>\n            </table>\n        )\n    }\n}\nTable.propTypes = {\n    animal: array,\n    toggleEdit: func\n}\nexport default Table","const executeApiCall = async (method, url, body) => {\n    const payload = {};\n    if (body) payload.body = JSON.stringify(body);\n\n    const response = await fetch(url, {\n        method,\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        ...payload\n    });\n\n    return await response.json();\n};\n\nexport default {\n    get (url) {\n        return executeApiCall('GET', url);\n    },\n    post (url, payload) {\n        return executeApiCall('POST', url, payload);\n    },\n    delete (url) {\n        return executeApiCall('DELETE', url);\n    },\n    update (url, payload) {\n        return executeApiCall('PUT', url, payload);\n    }\n};\n","import apiUtil from '../utils/api';\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:4000'\nconst buildUrl = apiPath => {\n    return BACKEND_URL + apiPath;\n};\n\nexport default {\n    async getAll () {\n        try {\n            console.log(buildUrl('/animals'));\n            const response = await apiUtil.get(buildUrl('/animals'));\n            console.log(response);\n            return response.data;\n        } catch (err) {\n            console.log(err);\n            return [];\n        }\n    },\n    async create (newOne) {\n        const response = await apiUtil.post(buildUrl('/animals'), newOne);\n        return response.data;\n    },\n    async delete (id) {\n        const response = await apiUtil.delete(buildUrl(`/animals/${id}`));\n        return response.data;\n    },\n    async updateCompletionStatus (id, isCompleted) {\n        const response = await apiUtil.update(buildUrl(`/animals/${id}`),\n            isCompleted,\n        );\n        return response.data;\n    }\n};","import React, { Component } from 'react'\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Table from './components/Table';\nimport animalService from './services/animalService';\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            name: '',\n            species: '',\n            breed: '',\n            sex: '',\n            age: 0,\n            image: '',\n            adopted: false,\n            animal: []\n        }\n    }\n\n    // toggle check\n    toggleCheck = () => {\n        this.setState({\n            adopted: !this.state.adopted\n        })\n    }\n    // handle Change\n    handleChange = (event) => {\n        this.setState({ [event.target.id]: event.target.value });\n    }\n\n    // handle submit\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const newOne = {\n            name: this.state.name,\n            species: this.state.species,\n            breed: this.state.breed,\n            sex: this.state.sex,\n            age: parseInt(this.state.age),\n            image: this.state.image,\n            adopted: this.state.adopted,\n            isEditing: false\n        };\n        const newData = await animalService.create(newOne);\n       \n        this.setState({\n            name: '',\n            species: '',\n            breed: '',\n            sex: '',\n            age: 0,\n            image: '',\n            adopted: false,\n            animal: [newData, ...this.state.animal]\n        });\n    }\n\n    toggleEdit = (event) => {\n        const index = event.target.id;\n        const animal = this.state.animal;\n        this.setState({\n            name: animal[index].name,\n            species: animal[index].species,\n            breed: animal[index].breed,\n            sex: animal[index].sex,\n            age: animal[index].age,\n            image: animal[index].image,\n            adopted: animal[index].adopted,\n        })\n        animal[index].isEditing = true;\n        this.setState({\n            animal: animal\n        });\n       \n    }\n    //  Fetch data\n    async fetchAnimal() {\n        const animal = await animalService.getAll();\n        this.setState({ animal: animal });\n        console.log(animal);\n    }\n    // Show data\n    componentDidMount() {\n        this.fetchAnimal()\n    }\n\n    // edit data\n    save = async (event) => {\n        event.preventDefault();\n        const id = event.target.id;\n        const animal = this.state.animal;\n    \n        const index = animal.findIndex(item => item._id === id);\n        console.log(index);\n\n        const updatedData = {\n            _id: id,\n            name: this.state.name,\n            species: this.state.species,\n            breed: this.state.breed,\n            sex: this.state.sex,\n            age: this.state.age,\n            image: this.state.image,\n            adopted: this.state.adopted,\n            isEditing: false\n        }\n\n        animal[index] = updatedData;\n        console.log(animal);\n        this.setState({\n            name: '',\n            species: '',\n            breed: '',\n            sex: '',\n            age: 0,\n            image: '',\n            adopted: false,\n            animal: animal\n        });\n        await animalService.updateCompletionStatus(id, updatedData);\n    }\n\n    // delete data\n    deleteData = async (event) => {\n        const id = event.target.getAttribute('a-key');\n        await animalService.delete(id);\n        const animal = this.state.animal;\n        const index = animal.findIndex(item => item._id === id);\n        this.setState({\n            animal: [\n                ...animal.slice(0, index),\n                ...animal.slice(index + 1)\n            ]\n        })\n    }\n    render() {\n        const { name, species, breed, sex, age, image, adopted } = this.state;\n        return (\n            <React.Fragment>\n                <Header />\n                <Form name={name}\n                    species={species} breed={breed}\n                    sex={sex} age={age} image={image}\n                    adopted={adopted}\n                    toggleCheck={this.toggleCheck}\n                    handleChange={this.handleChange}\n                    handleSubmit={this.handleSubmit} />\n\n                <Table animal={this.state.animal}\n                    toggleEdit={this.toggleEdit}\n                    name={name}\n                    species={species} breed={breed}\n                    sex={sex} age={age} image={image}\n                    adopted={adopted}\n                    handleChange={this.handleChange}\n                    toggleCheck={this.toggleCheck}\n                    save={this.save}\n                    delete={this.deleteData}\n                />\n            </React.Fragment>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('.container')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}